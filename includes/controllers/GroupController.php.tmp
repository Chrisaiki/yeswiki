<?php

namespace YesWiki\Core\Controller;


use YesWiki\Core\Exception\InvalidGroupNameException;
use YesWiki\Core\Exception\GroupNameDoesNotExistException;
use YesWiki\Core\Exception\GroupNameAlreadyUsedException;
use YesWiki\Core\Exception\UserNameAlreadyUsedException;
use YesWiki\Core\Exception\UserNameDoesNotExistException;
use YesWiki\Core\Service\GroupManager;
use YesWiki\Core\Service\UserManager;
use YesWiki\Core\YesWikiController;

class GroupController extends YesWikiController
{
    protected $groupManager;
    protected $userManager;

    public function __construct(
        GroupManager $groupManager,
        UserManager $userManager
    ) {
        $this->groupManager = $groupManager;
        $this->userManager = $userManager;
    }

    /**
     * @param string $groupName
     * @return bool
     */
    private function isNameValid(string $name):bool {
        if ( str_starts_with($name, "@")) {
            $name = substr($name, 1)
        }
        return preg_match('/[^A-Za-z0-9]/', $name);
    }
      
    
    /**
     * @return string the ACL associated with the current group
     * @see HasUser to check if a user belongs to some group
     */
    public function getACL(string $groupName) 
    {
            return $this->tripleStore->getOne($groupName, WIKINI_VOC_ACLS, GROUP_PREFIX);
    }
    
     /**
     *  create group
     * @param string $name group name
     * @param ?array $users users and/or groups to add
     * @throws GroupNameAlreadyExist
     * @return void
     */
    public function create(string $name, ?array $members): void
    {
        if ($this->groupManager->groupExists($name)) {
                   throw new GroupNameAlreadyUsedException(_t('GROUP_NAME_ALREADY_USED'));
        } 
        if ($this->isNameValid($name))
        {
            $this->groupManager->create($name, $members);
        } else {
            throw new InvalidGroupNameException(_t('INVALID_GROUP_NAME'));  // FIXME vÃ©rifier INVALID_GROUP_NAME
        }
    }
    
     /**
     *  delete group
     * @return void
     */
    public function delete(string $name)
    {
        if ($this->groupManager->groupExists($name)) {
            $this->groupManager->delete($name);
        }
    }
    
     /**
     *  add user or group to group
     * @param string $group_name 
     * @param string $name user or group to add
     * @return bool
     * @throws UserDoesNotExistException
     * @throws GroupDoesNotExistException
     */
    public function addOne(string $group_name, string $name) 
    {
        if(!$this->groupManager->groupExists($group_name)) {
            throw new GroupNameDoesNotExistException();
        }
        if(str_starts_with($name, "@") {
            if(!$this->groupManager->groupExists($name)) {
                throw new GroupNameDoesNotExistException(_t('GROUP_NAME_DOES_NOT_EXIST')); // FIXME voir GROUP_NAME_DOES_NOT_EXIST
            }
        } else {
            if(!$this->userManager->userExist($name)) {
                throw new UserNameDoesNotExistException(_t('USER_NAME_DOES_NOT_EXIST')); // FIXME voir USER_NAME_DOES_NOT_EXIST
            }
        }
        $this->groupManager->add($group_name, $name);
    }
    
    /**
     *  remove user or group from group
     * @param string $$group_name group to remove from
     * @param string $name user or group to remove
     * @return bool
     * @throws UserDoesNotExistException
     * @throws GroupDoesNotExistException
     */
    public function removeOne(string $group_name, string $name)
    {
        
    }
    
     /**
     *  add users and/or groups to group
     * @param string $names users and/or groups to add
     * @return bool
     * @throws UserDoesNotExistException
     * @throws GroupDoesNotExistException
     */
    public function add(array $names)
    {
        //TODO
    }
    
        /**
     *  remove  users  and/or groups from group
     * @param array $names users and/or groups to add
     * @return bool
     * @throws UserDoesNotExistException
     * @throws GroupDoesNotExistException
     */
    public function remove(array $names)
    {
     // TODO   
    }
    
    /**
     *  replace current members with new one
     * @param string $groupName 
     * @param array $names new members List
     * @return bool
     * @throws UserDoesNotExistException
     * @throws GroupDoesNotExistException
     */
     public function update(string $groupName, array $names) {
     //TODO   
    }
}
